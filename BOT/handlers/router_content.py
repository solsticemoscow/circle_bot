import os
import shutil
from typing import NoReturn

from aiogram import Bot, Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydub import AudioSegment
from sqlalchemy import update, select

from config import DATA_INPUT
from db.db import DB_SESSION
from db.tables import Users
from handlers.fsm_states import FSMSTATES


router = Router()




@router.callback_query(FSMSTATES.STEP_TASK_MUSIC)
async def step_task_music(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.answer()
    USER_ID: int = call.message.chat.id
    DATA: str = call.data

    DATA_STATE = await state.get_data()

    if DATA == 'yes':
        await state.set_data(
            {"video_note_time": DATA_STATE["video_note_time"],
             "round": DATA_STATE["round"]
             }
        )
        await bot.edit_message_text(
            chat_id=USER_ID,
            message_id=call.message.message_id,
            text='‚è≥ –ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ:'
        )
        await state.set_state(FSMSTATES.STEP_TASK_MUSIC_GET)
    if DATA == 'no':
        await bot.send_message(chat_id=USER_ID, text='‚åõ –°–æ–∑–¥–∞—é –≤–∞—à –∫—Ä—É–∂–æ—á–µ–∫...')

        await bot.send_message(chat_id=USER_ID,
                               text='–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @volna_telegram –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É üÜí')

        DATA_STATE = await state.get_data()



        # VIDEONOTE = VideoNote(telegram_id=USER_ID, video_note_time=int(DATA_STATE["video_note_time"]))

        if DATA_STATE['round'] is True:
            TASK = {"type": "1", "video_note_time": int(DATA_STATE["video_note_time"])}

            stmt = update(Users).values(task_status=True, task=TASK).where(Users.id == USER_ID)
            await DB_SESSION.execute(statement=stmt)
            await DB_SESSION.commit()
            await DB_SESSION.close()

            # TASK = Task(
            #     task_type='1',
            #     telegram_id=USER_ID,
            #     complete=False,
            #     video_note_time=int(DATA_STATE["video_note_time"]),
            #     repeat=1
            # )
            #
            # add_task(task=TASK)

            # await VIDEONOTE.crop()
            # await VIDEONOTE.compose()
            # await VIDEONOTE.add_texture()
            # await VIDEONOTE.add_watermark()
            # await VIDEONOTE.write_to_disk()
        else:
            TASK = {"type": "2", "video_note_time": int(DATA_STATE["video_note_time"])}

            stmt = update(Users).values(task_status=True, task=TASK).where(Users.id == USER_ID)
            await DB_SESSION.execute(statement=stmt)
            await DB_SESSION.commit()
            await DB_SESSION.close()

            # TASK = Task(
            #     task_type='2',
            #     telegram_id=USER_ID,
            #     complete=False,
            #     video_note_time=int(DATA_STATE["video_note_time"]),
            #     repeat=1
            # )
            #
            # add_task(task=TASK)

            # await VIDEONOTE.crop()
            # await VIDEONOTE.add_watermark()
            # await VIDEONOTE.write_to_disk()

        # stmt = select(Channels).where(Channels.user_id == USER_ID)
        # result = await DB_SESSION.execute(statement=stmt)
        # CHANNELS = result.all()
        #
        # if CHANNELS:
        #     keyboard = InlineKeyboardBuilder()
        #     for channel in CHANNELS:
        #         keyboard.add(InlineKeyboardButton(text=channel[0].channel_name, callback_data='CHANNEL:' + str(channel[0].id)))
        #     keyboard.adjust(1)
        #     await bot.send_video_note(
        #         chat_id=USER_ID,
        #         video_note=FSInputFile(DATA_INPUT + str(USER_ID) + '/video_final.mp4'),
        #         reply_markup=keyboard.as_markup()
        #     )
        # else:
        #     await bot.send_video_note(
        #         chat_id=USER_ID,
        #         video_note=FSInputFile(DATA_INPUT + str(USER_ID) + '/video_final.mp4')
        #     )

        await state.clear()





@router.message(FSMSTATES.STEP_TASK_MUSIC_GET)
async def get_music(message: types.Message, bot: Bot, state: FSMContext) -> NoReturn:
    USER_ID: int = message.from_user.id

    if message.audio:
        try:
            file = await bot.get_file(message.audio.file_id)
        except Exception:
            await message.answer(
                "‚ùå —è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. –Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–æ 20 –º–µ–≥–∞–±–∞–π—Ç, –∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ")
            return
        try:
            await bot.download_file(file_path=file.file_path,
                                    destination=DATA_INPUT + str(USER_ID) + '/' + message.audio.file_name)
            AudioSegment.from_file(DATA_INPUT + str(USER_ID) + '/' + message.audio.file_name).export(
                out_f=DATA_INPUT + str(USER_ID) + '/music.mp3',
                bitrate="256k",
                format="mp3")
        except Exception as e:
            print(e)
        await bot.send_message(chat_id=USER_ID, text='‚úÖ –ü–æ–ª—É—á–∏–ª –≤–∞—à—É –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É.')

        await bot.send_message(chat_id=USER_ID, text='‚åõ –°–æ–∑–¥–∞—é –≤–∞—à –∫—Ä—É–∂–æ—á–µ–∫...')

        DATA_STATE = await state.get_data()
        # VIDEONOTE = VideoNote(telegram_id=USER_ID, video_note_time=int(DATA_STATE["video_note_time"]))


        if DATA_STATE["round"] is True:
            TASK = {"type": "3", "video_note_time": int(DATA_STATE["video_note_time"])}

            stmt = update(Users).values(task_status=True, task=TASK).where(Users.id == USER_ID)
            await DB_SESSION.execute(statement=stmt)
            await DB_SESSION.commit()
            await DB_SESSION.close()

            # TASK = Task(
            #     task_type='3',
            #     telegram_id=USER_ID,
            #     complete=False,
            #     video_note_time=int(DATA_STATE["video_note_time"]),
            #     repeat=1
            # )
            #
            # add_task(task=TASK)

            # await VIDEONOTE.crop()
            # await VIDEONOTE.compose()
            # await VIDEONOTE.add_texture()
            # await VIDEONOTE.add_audio()
            # await VIDEONOTE.add_watermark()
            # await VIDEONOTE.write_to_disk()
        else:
            TASK = {"type": "4", "video_note_time": int(DATA_STATE["video_note_time"])}

            stmt = update(Users).values(task_status=True, task=TASK).where(Users.id == USER_ID)
            await DB_SESSION.execute(statement=stmt)
            await DB_SESSION.commit()
            await DB_SESSION.close()

            # TASK = Task(
            #     task_type='4',
            #     telegram_id=USER_ID,
            #     complete=False,
            #     video_note_time=int(DATA_STATE["video_note_time"]),
            #     repeat=1
            # )
            #
            # add_task(task=TASK)

            # await VIDEONOTE.crop()
            # await VIDEONOTE.add_audio()
            # await VIDEONOTE.add_watermark()
            # await VIDEONOTE.write_to_disk()

        # stmt = select(Channels).where(Channels.user_id == USER_ID)
        # result = await DB_SESSION.execute(statement=stmt)
        # CHANNELS = result.all()
        #
        # if CHANNELS:
        #     keyboard = InlineKeyboardBuilder()
        #     for channel in CHANNELS:
        #         keyboard.add(InlineKeyboardButton(text=channel[0].channel_name, callback_data='CHANNEL:' + str(channel[0].id)))
        #     keyboard.adjust(1)
        #     await bot.send_video_note(
        #         chat_id=USER_ID,
        #         video_note=FSInputFile(DATA_INPUT + str(USER_ID) + '/video_final.mp4'),
        #         reply_markup=keyboard.as_markup()
        #     )
        # else:
        #     await bot.send_video_note(
        #         chat_id=USER_ID,
        #         video_note=FSInputFile(DATA_INPUT + str(USER_ID) + '/video_final.mp4')
        #     )

        await bot.send_message(chat_id=USER_ID,
                               text='–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @volna_telegram –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É üÜí')
        await state.clear()

    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ö† –í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:"
        )
        await state.set_state(FSMSTATES.STEP_TASK_MUSIC_GET)



@router.callback_query(FSMSTATES.STEP_TASK_DURATION)
async def get_duration(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.answer()
    USER_ID: int = call.message.chat.id

    video_note_time = call.data
    await state.set_data({"video_note_time": video_note_time})

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚ûï –î–∞", callback_data="yes"))
    keyboard.add(InlineKeyboardButton(text="‚ûñ –ù–µ—Ç", callback_data="no"))
    keyboard.adjust(1)

    await bot.edit_message_text(
        chat_id=USER_ID,
        message_id=call.message.message_id,
        text="üí° –•–æ—Ç–∏—Ç–µ –Ω–∞–ª–æ–∂–∏—Ç—å –æ–±–≤–æ–¥–∫—É –Ω–∞ –≤–∞—à –∫—Ä—É–∂–æ—á–µ–∫?",
        reply_markup=keyboard.as_markup())

    await state.set_state(FSMSTATES.STEP_TASK_ROUND)


@router.callback_query(FSMSTATES.STEP_TASK_ROUND)
async def get_duration(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.answer()
    USER_ID: int = call.message.chat.id
    DATA = call.data

    DATA_STATE = await state.get_data()


    if DATA == 'yes':
        await state.set_data(
            {"video_note_time": DATA_STATE["video_note_time"],
             "round": True
             }
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±–≤–æ–¥–∫–∏", callback_data="builtin"))
        keyboard.add(InlineKeyboardButton(text="–°–≤–æ–π –¥–∏–∑–∞–π–Ω üÜí", callback_data="own"))
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        keyboard.adjust(1)

        await bot.edit_message_text(
            chat_id=USER_ID,
            message_id=call.message.message_id,
            text="üí° –í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞ —à–∞–±–ª–æ–Ω—ã –æ–±–≤–æ–¥–æ–∫ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–π –¥–∏–∑–∞–π–Ω?",
            reply_markup=keyboard.as_markup())

        await state.set_state(FSMSTATES.STEP_TASK_ROUND_QA)

    if DATA == 'no':
        await state.set_data(
            {"video_note_time": DATA_STATE["video_note_time"],
             "round": False
             }
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É", callback_data="yes"))
        keyboard.add(InlineKeyboardButton(text="‚ûñ –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å", callback_data="no"))
        keyboard.adjust(1)

        await bot.send_message(chat_id=USER_ID,
                               text="üí° –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ª–æ–∂–∏—Ç—å –º—É–∑—ã–∫—É?\n<i>(–±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ç–≥ –∫–∞–∫ "
                                    "–∞—É–¥–∏–æ—Ñ–∞–π–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä mp3 –∏ –¥—Ä—É–≥–∏–µ)</i>",
                               reply_markup=keyboard.as_markup())

        await state.set_state(FSMSTATES.STEP_TASK_MUSIC)




@router.callback_query(FSMSTATES.STEP_TASK_ROUND_QA)
async def get_duration(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.answer()
    USER_ID: int = call.message.chat.id
    DATA = call.data

    DATA_STATE = await state.get_data()
    await state.set_data(
        {"video_note_time": DATA_STATE["video_note_time"],
         "round": DATA_STATE["round"]
         }
    )

    if DATA == 'back':
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚ûï –î–∞", callback_data="yes"))
        keyboard.add(InlineKeyboardButton(text="‚ûñ –ù–µ—Ç", callback_data="no"))
        keyboard.adjust(1)

        await bot.edit_message_text(
            chat_id=USER_ID,
            message_id=call.message.message_id,
            text="üí° –•–æ—Ç–∏—Ç–µ –Ω–∞–ª–æ–∂–∏—Ç—å –æ–±–≤–æ–¥–∫—É –Ω–∞ –≤–∞—à –∫—Ä—É–∂–æ—á–µ–∫?",
            reply_markup=keyboard.as_markup())

        await state.set_state(FSMSTATES.STEP_TASK_ROUND)
    if DATA == 'own':
        keyboard = InlineKeyboardBuilder()
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))

        gif = FSInputFile("DATA/help_buy_sub.gif")
        await bot.send_video(chat_id=USER_ID,
                             caption="üÜí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –æ–±–≤–æ–¥–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\n"
                                     "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ @oksankazhu\n\n"
                                     "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ ¬´–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                             video=gif,
                             reply_markup=keyboard.as_markup())

        await state.set_state(FSMSTATES.STEP_TASK_TEXTURE)
    if DATA == 'builtin':

        keyboard = InlineKeyboardBuilder()
        for i in range(1, 6):
            keyboard.add(InlineKeyboardButton(text=str(i), callback_data=str(i)))
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        keyboard.adjust(5, 1)

        photo = FSInputFile("DATA/textures_choose.PNG")
        await bot.send_photo(chat_id=USER_ID, caption="üí° –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–≤–æ–¥–∫—É:", photo=photo,
                             reply_markup=keyboard.as_markup())

        await state.set_state(FSMSTATES.STEP_TASK_TEXTURE)


@router.callback_query(FSMSTATES.STEP_TASK_TEXTURE)
async def get_duration(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.answer()

    USER_ID: int = call.message.chat.id
    DATA = call.data

    if DATA == 'back':
        await bot.delete_message(chat_id=USER_ID, message_id=call.message.message_id)

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±–≤–æ–¥–∫–∏", callback_data="builtin"))
        keyboard.add(InlineKeyboardButton(text="–°–≤–æ–π –¥–∏–∑–∞–π–Ω üÜí", callback_data="own"))
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        keyboard.adjust(1)

        await bot.send_message(
            chat_id=USER_ID,
            text="üí° –í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞ —à–∞–±–ª–æ–Ω—ã –æ–±–≤–æ–¥–æ–∫ –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–π –¥–∏–∑–∞–π–Ω?",
            reply_markup=keyboard.as_markup())

        await state.set_state(FSMSTATES.STEP_TASK_ROUND_QA)

    else:
        await bot.delete_message(chat_id=USER_ID, message_id=call.message.message_id)

        DATA_STATE = await state.get_data()
        await state.set_data(
            {"video_note_time": DATA_STATE["video_note_time"],
             "round": DATA_STATE["round"]
             }
        )

        shutil.copyfile(f'DATA/textures/{DATA}.PNG', f"DATA/input/{USER_ID}/texture.PNG")

        photo = FSInputFile("DATA/texture_help.PNG")
        await bot.send_photo(chat_id=USER_ID,
                             caption="üí° –ü—Ä–∏—à–ª–∏—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ü–≤–µ—Ç –∏–ª–∏ –¥–∏–∑–∞–π–Ω –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–≤–æ–¥–∫–µ:",
                             photo=photo
                             )

        await state.set_state(FSMSTATES.STEP_TASK_ROUND_IMAGE)




@router.message(FSMSTATES.STEP_TASK_ROUND_IMAGE)
async def get_shape(message: types.Message, bot: Bot, state: FSMContext):
    USER_ID: int = message.from_user.id

    DATA_STATE = await state.get_data()
    await state.set_data(
        {"video_note_time": DATA_STATE["video_note_time"],
         "round": DATA_STATE["round"]
         }
    )
    await bot.delete_message(chat_id=USER_ID, message_id=message.message_id)
    await bot.send_message(chat_id=USER_ID, text='‚úÖ –ü–æ–ª—É—á–∏–ª –≤–∞—à—É –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –æ–±–≤–æ–¥–∫–∏.')

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    except Exception:
        pass

    try:
        file = await bot.get_file(message.photo[-1].file_id)
    except Exception:
        await message.answer(
            "‚ùå —è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. –Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–æ 20 –º–µ–≥–∞–±–∞–π—Ç, –∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ")
        return

    await bot.download_file(file.file_path, DATA_INPUT + str(USER_ID) + '/image_for_texture.jpg')

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É", callback_data="yes"))
    keyboard.add(InlineKeyboardButton(text="‚ûñ –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å", callback_data="no"))
    keyboard.adjust(1)

    await bot.send_message(chat_id=USER_ID,
                           text="üí° –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ª–æ–∂–∏—Ç—å –º—É–∑—ã–∫—É?\n<i>(–±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ç–≥ –∫–∞–∫ "
                                "–∞—É–¥–∏–æ—Ñ–∞–π–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä mp3 –∏ –¥—Ä—É–≥–∏–µ)</i>",
                           reply_markup=keyboard.as_markup())

    await state.set_state(FSMSTATES.STEP_TASK_MUSIC)


@router.message(F.video)
async def get_video(message: types.Message, bot: Bot, state: FSMContext):
    USER_ID: int = message.from_user.id

    stmt = select(Users.task_status).where(Users.id == USER_ID)
    result = await DB_SESSION.execute(statement=stmt)
    TASK_STATUS = result.scalar()

    if TASK_STATUS:
        await message.answer(
            "‚ö† –£ –≤–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
    else:
        try:
            shutil.rmtree(DATA_INPUT + str(USER_ID))
        except Exception as e:
            print(e)

        if not os.path.exists(DATA_INPUT + str(USER_ID)):
            os.makedirs(DATA_INPUT + str(USER_ID))

        if message.video.duration > 60:
            await message.answer(
                text="‚ùå –Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ –¥–ª–∏–Ω–µ–µ —á–µ–º –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                     " –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã")
        else:
            try:
                file = await bot.get_file(message.video.file_id)
                await bot.download_file(file.file_path, DATA_INPUT + str(USER_ID) + '/video.mp4')

                await message.answer(text="‚úÖ –ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ.")

                keyboard = InlineKeyboardBuilder()
                keyboard.add(InlineKeyboardButton(text="1 —Å–µ–∫", callback_data="1"))
                for step in range(0, 60, 5):
                    if step != 0:
                        keyboard.add(InlineKeyboardButton(text=str(step) + ' —Å–µ–∫', callback_data=str(step)))
                keyboard.add(InlineKeyboardButton(text="59 —Å–µ–∫", callback_data="59"))
                keyboard.adjust(1)

                await bot.send_message(
                    chat_id=USER_ID,
                    text="üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",
                    reply_markup=keyboard.as_markup()
                )
                await state.set_state(FSMSTATES.STEP_TASK_DURATION)
            except Exception:
                await message.answer(
                    "‚ùå —è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. –Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–æ 20 –º–µ–≥–∞–±–∞–π—Ç, –∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ")






@router.message(F.animation)
async def get_photo(message: types.Message, bot: Bot, state: FSMContext):
    USER_ID: int = message.from_user.id

    stmt = select(Users.task_status).where(Users.id == USER_ID)
    result = await DB_SESSION.execute(statement=stmt)
    TASK_STATUS = result.scalar()

    if TASK_STATUS:
        await message.answer(
            "‚ö† –£ –≤–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
    else:
        try:
            shutil.rmtree(DATA_INPUT + str(USER_ID))
        except Exception as e:
            print(e)

        if not os.path.exists(DATA_INPUT + str(USER_ID)):
            os.makedirs(DATA_INPUT + str(USER_ID))

        try:
            file = await bot.get_file(message.animation.file_id)
        except Exception:
            await message.answer(
                "—è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. –Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–æ 20 –º–µ–≥–∞–±–∞–π—Ç, –∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ")
            return
        await bot.download_file(file.file_path, DATA_INPUT + str(USER_ID) + '/animation.gif')

        await message.answer(text="‚úÖ –ü–æ–ª—É—á–∏–ª –∞–Ω–∏–º–∞—Ü–∏—é.")

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="1 —Å–µ–∫", callback_data="1"))
        for step in range(0, 60, 5):
            if step != 0:
                keyboard.add(InlineKeyboardButton(text=str(step) + ' —Å–µ–∫', callback_data=str(step)))
        keyboard.add(InlineKeyboardButton(text="59 —Å–µ–∫", callback_data="59"))
        keyboard.adjust(1)

        await bot.send_message(
            chat_id=USER_ID,
            text="üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(FSMSTATES.STEP_TASK_DURATION)




@router.message(F.photo)
async def get_photo(message: types.Message, bot: Bot, state: FSMContext):
    USER_ID: int = message.from_user.id

    stmt = select(Users.task_status).where(Users.id == USER_ID)
    result = await DB_SESSION.execute(statement=stmt)
    TASK_STATUS = result.scalar()

    if TASK_STATUS:
        await message.answer(
            "‚ö† –£ –≤–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
    else:
        try:
            shutil.rmtree(DATA_INPUT + str(USER_ID))
        except Exception as e:
            print(e)

        if not os.path.exists(DATA_INPUT + str(USER_ID)):
            os.makedirs(DATA_INPUT + str(USER_ID))

        photo = message.photo
        try:
            file = await bot.get_file(photo[len(photo) - 1].file_id)
        except Exception:
            await message.answer(
                "—è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. –Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–æ 20 –º–µ–≥–∞–±–∞–π—Ç, –∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ")
            return
        await bot.download_file(file.file_path, DATA_INPUT + str(USER_ID) + '/image.jpg')

        await message.answer(text="‚úÖ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ.")

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="1 —Å–µ–∫", callback_data="1"))
        for step in range(0, 60, 5):
            if step != 0:
                keyboard.add(InlineKeyboardButton(text=str(step) + ' —Å–µ–∫', callback_data=str(step)))
        keyboard.add(InlineKeyboardButton(text="59 —Å–µ–∫", callback_data="59"))
        keyboard.adjust(1)

        await bot.send_message(
            chat_id=USER_ID,
            text="üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(FSMSTATES.STEP_TASK_DURATION)



