import random, os
import string


from aiogram import Bot, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, KeyboardButton, InlineKeyboardButton, )
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.utils.markdown import hlink
from sqlalchemy import func, insert, select
from sqlalchemy.exc import IntegrityError

from BOT.config import OWNER, DANIEL, DATA_INPUT


from BOT.db.db import DB_SESSION
from BOT.db.tables import Users, Buttons, Data

from BOT.handlers.router_admin import router as router_admin
from BOT.handlers.router_user import router as router_user
from BOT.handlers.router_last import router as router_last
from BOT.handlers.router_content import router as router_content

from BOT.handlers.fsm_states import FSMSTATES

router = Router()
router.include_router(router_admin)
router.include_router(router_user)
router.include_router(router_content)
router.include_router(router_last)

@router.message(Command(commands=["start"]))
async def get_start(message: Message, bot: Bot, state: FSMContext):
    USERNAME: str = message.from_user.username
    USER_ID: int = message.from_user.id

    try:
        stmt = insert(Users).values(
            id=USER_ID,
            username=USERNAME,
            firstname=message.from_user.first_name,
            lastname=message.from_user.last_name,
            language_code=message.from_user.language_code,
            time_added=func.now(),
            is_premium=message.from_user.is_premium,
        )
        await DB_SESSION.execute(statement=stmt)
        await DB_SESSION.commit()

    except IntegrityError as e:
        print(e)

    keyboard = ReplyKeyboardBuilder()
    keyboard.row(KeyboardButton(text='‚ö°Ô∏è–ü–æ—Å—Ç–∏–Ω–≥ –Ω–∞ –∫–∞–Ω–∞–ª'))
    keyboard.adjust(1, 1)

    stmt = select(Buttons)
    result = await DB_SESSION.execute(statement=stmt)
    DATA = result.all()

    if DATA:
        for button in DATA:
            keyboard.row(KeyboardButton(text=button[0].button_name))
            keyboard.adjust(1, 1)

    await message.answer(text='ü§ñ –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç!', reply_markup=keyboard.as_markup(resize_keyboard=True))
    await message.answer(text='üìé –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ, gif –∏–ª–∏ –≤–∏–¥–µ–æ –¥–æ –º–∏–Ω—É—Ç—ã –∏ –∂–¥–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.')
    await bot.delete_message(chat_id=USER_ID, message_id=message.message_id)

    await bot.unpin_all_chat_messages(chat_id=message.from_user.id)

    stmt = select(Data.hi_message)
    result = await DB_SESSION.execute(statement=stmt)
    TEXT: str = result.scalar_one_or_none()


    if TEXT is None:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back"))

        await bot.send_message(
            chat_id=USER_ID,
            text='üî∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–Ω–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω–æ):',
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(FSMSTATES.STEP1_EDIT_HIMSG)
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üëâ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://t.me/volna_telegram/6"))

        MSG_ID = await message.answer(
            text=TEXT,
            reply_markup=keyboard.as_markup()
        )

        await bot.pin_chat_message(chat_id=message.from_user.id, message_id=MSG_ID.message_id)
        await state.clear()




@router.message(Command(commands=["admin"]))
async def start(message: Message, bot: Bot, state: FSMContext):
    USER_ID: int = message.from_user.id

    await state.clear()
    await bot.delete_message(chat_id=USER_ID, message_id=message.message_id)

    if message.from_user.id not in [OWNER, DANIEL]:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–≤—ã –Ω–µ –∞–¥–º–∏–Ω –±–æ—Ç–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üòä\n"
                                    "–ù–æ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
                                    "—Å–¥–µ–ª–∞—Ç—å –∫—Ä—É–∂–æ—á–µ–∫ –∏–∑ —Ñ–æ—Ç–∫–∏ –∏–ª–∏ –≤–∏–¥–µ–æ –∏ "
                                    "–ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ —Å–≤–æ–π –ª—é–±–∏–º—ã–π –∫–∞–Ω–∞–ª (–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –µ–≥–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è "
                                    "—Ç—É–¥–∞ üòä)")
        return
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üî∏ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", callback_data="admin_whitelist"))
        keyboard.add(InlineKeyboardButton(text="üî∏ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_himsg"))
        keyboard.add(InlineKeyboardButton(text="üî∏ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_send"))
        keyboard.add(InlineKeyboardButton(text="üî∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stat"))
        keyboard.add(InlineKeyboardButton(text="üî∏ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω –±–æ—Ç", callback_data="admin_channel"))
        keyboard.add(InlineKeyboardButton(text="üî∏ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_usermenu"))
        keyboard.adjust(1)

        stmt = select(Data)
        result = await DB_SESSION.execute(statement=stmt)
        DATA = result.scalar_one_or_none()
        print(DATA)

        CHANNEL_ID = DATA.channel_id
        CHANNEL_TITLE = DATA.channel_title

        stmt = select(Users)
        result = await DB_SESSION.execute(statement=stmt)
        USERS = result.all()

        await bot.send_message(chat_id=message.from_user.id,
                               reply_markup=keyboard.as_markup(),
                               text='üîè <i>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!</i>\n\n'
                                    '–ö–∞–Ω–∞–ª –±–æ—Ç–∞: ' + hlink(f"{CHANNEL_TITLE}", f"{(await bot.get_chat(CHANNEL_ID)).invite_link}") +
                                    f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {len(USERS)}',
)


@router.message(Command(commands=["test"]))
async def command_start(message: Message, bot: Bot):
    USER_ID: int = message.from_user.id
    CODE = ''.join(random.choices(string.ascii_letters, k=8))

    try:
        if not os.path.exists(f"{DATA_INPUT}{USER_ID}/"):
            os.makedirs(f"{DATA_INPUT}{USER_ID}/")
    except Exception as e:
        await bot.send_message(
            chat_id=USER_ID,
            text=f'–û—à–∏–±–∫–∞: {str(e)}'
        )
